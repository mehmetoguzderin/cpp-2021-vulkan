#version 460 core
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_atomic_int64 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float32 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float64 : enable
#extension GL_GOOGLE_include_directive : enable

#define SHADER_GLSL
#include "main.h"

layout(push_constant, scalar) uniform CONSTANTS constants;

layout(set = 0, binding = 0, rgba8) uniform image2D image;
layout(set = 0, binding = 1, rgba32f) uniform image2D samples;

layout(local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;
void main() {
  if (gl_GlobalInvocationID.x >= TILE_SIZE || gl_GlobalInvocationID.y >= TILE_SIZE)
    return;
  ivec2 xy = ivec2(constants.offset[0], constants.offset[1]) + ivec2(gl_GlobalInvocationID.xy);
  if (xy.x >= constants.wh[0] || xy.y >= constants.wh[1])
    return;
  vec4 samplesValue = imageLoad(samples, xy);
  samplesValue += vec4(0, vec2(vec2(xy) / vec2(constants.wh[0], constants.wh[1])) * 0.0001f, 1);
  imageStore(samples, xy, samplesValue);
  imageStore(image, xy,
             samplesValue + vec4(constants.clearColor[0], constants.clearColor[1], constants.clearColor[2], constants.clearColor[3]));
}